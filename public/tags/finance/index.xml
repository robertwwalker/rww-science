<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>finance | </title>
    <link>/tags/finance/</link>
      <atom:link href="/tags/finance/index.xml" rel="self" type="application/rss+xml" />
    <description>finance</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2018</copyright><lastBuildDate>Tue, 29 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/portrait.jpg</url>
      <title>finance</title>
      <link>/tags/finance/</link>
    </image>
    
    <item>
      <title>Financial Analysis of SEC Reports in R</title>
      <link>/r/finreportr-is-awesome/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/finreportr-is-awesome/</guid>
      <description>


&lt;div id=&#34;the-package-finreport&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Package: &lt;code&gt;finreport&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The key tool to facilitate the financial analysis of companies that file regular SEC reports of certain forms is &lt;code&gt;finreportr&lt;/code&gt;. To make use of it, we must first have R install it and dependencies. To install it, &lt;code&gt;install.packages(&amp;quot;finreportr&amp;quot;, dependencies=TRUE)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-commands&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Commands&lt;/h2&gt;
&lt;p&gt;The first command is &lt;code&gt;CompanyInfo()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(finreportr)
CompanyInfo(&amp;quot;JPM&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               company        CIK  SIC state state.inc FY.end     street.address
## 1 JPMORGAN CHASE &amp;amp; CO 0000019617 6021    NY        DE   1231 383 MADISON AVENUE
##          city.state
## 1 NEW YORK NY 10017&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;CompanyInfo()&lt;/code&gt; gives the basics on the company from the SEC including addresses, incorporation details, and numeric codes.&lt;/p&gt;
&lt;p&gt;The next command is &lt;code&gt;AnnualReports()&lt;/code&gt;. It returns a list of the reports with the type and the accession number of the actual document.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;jp-morgan-jpm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;JP Morgan [JPM]&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;AnnualReports(&amp;quot;JPM&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    filing.name filing.date         accession.no
## 1         10-K  2019-02-26 0000019617-19-000054
## 2         10-K  2018-02-27 0000019617-18-000057
## 3         10-K  2017-02-28 0000019617-17-000314
## 4         10-K  2016-02-23 0000019617-16-000902
## 5         10-K  2015-02-24 0000019617-15-000272
## 6         10-K  2014-02-20 0000019617-14-000289
## 7         10-K  2013-02-28 0000019617-13-000221
## 8         10-K  2012-02-29 0000019617-12-000163
## 9         10-K  2011-02-28 0000950123-11-019773
## 10        10-K  2010-02-24 0000950123-10-016029
## 11        10-K  2009-03-02 0000950123-09-003840
## 12        10-K  2008-02-29 0001193125-08-043536
## 13        10-K  2007-03-01 0000950123-07-003015
## 14      10-K/A  2006-08-03 0000950123-06-009854
## 15      10-K/A  2006-06-22 0000950123-06-008545
## 16        10-K  2006-03-09 0000950123-06-002875
## 17      10-K/A  2005-06-28 9999999997-05-030472
## 18        10-K  2005-03-02 0000950123-05-002539
## 19      10-K/A  2004-06-28 9999999997-04-028305
## 20        10-K  2004-02-18 0000950123-04-002022
## 21      10-K/A  2003-06-30 9999999997-03-028080
## 22        10-K  2003-03-19 0000950123-03-002985
## 23      10-K/A  2002-06-28 9999999997-02-037872
## 24     10-K405  2002-03-22 0000950123-02-002823
## 25     10-K405  2001-03-22 0000950123-01-002499
## 26      10-K/A  2000-06-28 0000019617-00-000125
## 27        10-K  2000-03-13 0000950123-00-002204
## 28      10-K/A  1999-06-29 0000950123-99-006055
## 29     10-K405  1999-03-11 0000950123-99-002057
## 30     10-K405  1998-03-30 0000950123-98-003043
## 31        10-K  1997-03-25 0000950123-97-002412
## 32     10-K405  1996-03-20 0000950123-96-001197
## 33      10-K/A  1995-06-26 0000019617-95-000080
## 34     10-K405  1995-03-27 0000950123-95-000706
## 35      10-K/A  1994-05-09 0000019617-94-000048
## 36        10-K  1994-03-25 0000950123-94-000607&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The analysis works on three financial reports: (1) &lt;code&gt;GetIncome()&lt;/code&gt;, (2) &lt;code&gt;GetCashFlow()&lt;/code&gt;, and (3) &lt;code&gt;GetBalanceSheet()&lt;/code&gt;. Each takes as argument the ticker and the year. First, a look at the disclaimer.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://github.com/robertwwalker/DADMStuff/raw/master/finreportr.png&#34; alt=&#34;Disclaimer&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Disclaimer&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;income-statements&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Income Statements&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;JPM.IS &amp;lt;- GetIncome(&amp;quot;JPM&amp;quot;, 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;balance-sheets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Balance Sheets&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;JPM.BS &amp;lt;- GetBalanceSheet(&amp;quot;JPM&amp;quot;, 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;statement-of-cash-flows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Statement of Cash Flows&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;JPM.SCF &amp;lt;- GetCashFlow(&amp;quot;JPM&amp;quot;, 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rendering-a-useful-tool-for-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rendering a Useful Tool for Excel&lt;/h2&gt;
&lt;p&gt;I want to develop a tool to export the data that we have grabbed. How might we do that? This will involve a reshape that will require the reshape2 package. This can be done relatively systematically. The &lt;em&gt;reshape&lt;/em&gt; command will take the &lt;code&gt;Metric&lt;/code&gt; and &lt;code&gt;Units&lt;/code&gt; as rows and place the &lt;code&gt;Amount&lt;/code&gt; in columns defined by the &lt;code&gt;endDate&lt;/code&gt;. The command is &lt;code&gt;dcast&lt;/code&gt; and it takes an input file and restructures data according to a fixed rule. Here, I will have a &lt;code&gt;Metric&lt;/code&gt; and &lt;code&gt;Units&lt;/code&gt; for each of multiple entries defined by &lt;code&gt;endDate&lt;/code&gt; with distinct &lt;code&gt;Amount&lt;/code&gt; for each &lt;code&gt;endDate&lt;/code&gt;. First, I will generate a separate version of each statement.&lt;/p&gt;
&lt;div id=&#34;reshape-rendering-the-data-in-wide-format&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reshape: Rendering the Data in Wide Format&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reshape2)
JPM.IS.W &amp;lt;- dcast(JPM.IS, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;)
JPM.SCF.W &amp;lt;- dcast(JPM.SCF, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;)
JPM.BS.W &amp;lt;- dcast(JPM.BS, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-file-to-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing a file to Excel&lt;/h2&gt;
&lt;p&gt;Now I want to write the file to Excel and combine them. I will use &lt;code&gt;xlsx&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(openxlsx) #load the package
write.xlsx(list(JPM.IS.W,JPM.BS.W,JPM.SCF.W), file = &amp;quot;JPM-2015.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-coup-de-grace-for-excel-users&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Coup de Grace for Excel Users&lt;/h2&gt;
&lt;p&gt;The last set of code can automate this. I will create a little function to do it all, taking as input, the ticker and year.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getSEC &amp;lt;- function(ticker, year) {
options(scipen=12)
library(finreportr)
library(reshape2)
library(openxlsx)
SEC.IS &amp;lt;- GetIncome(ticker, 2015)
SEC.IS$Amount &amp;lt;- as.numeric(SEC.IS$Amount)
SEC.BS &amp;lt;- GetBalanceSheet(ticker, 2015)
SEC.BS$Amount &amp;lt;- as.numeric(SEC.BS$Amount)
SEC.SCF &amp;lt;- GetCashFlow(ticker, 2015)
SEC.SCF$Amount &amp;lt;- as.numeric(SEC.SCF$Amount)
SEC.IS.W &amp;lt;- dcast(SEC.IS, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;, fun.aggregate=mean)
SEC.SCF.W &amp;lt;- dcast(SEC.SCF, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;, fun.aggregate=mean)
SEC.BS.W &amp;lt;- dcast(SEC.BS, Metric + Units ~ endDate, value.var=&amp;quot;Amount&amp;quot;, fun.aggregate=mean)
write.xlsx(list(SEC.IS.W,SEC.BS.W,SEC.SCF.W), file = paste(ticker,&amp;quot;-&amp;quot;,year,&amp;quot;.xlsx&amp;quot;, sep=&amp;quot;&amp;quot;))
return(list(BS=SEC.BS,IS=SEC.IS,SCF=SEC.SCF))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Does it work?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Try the function on Target
TGT &amp;lt;- getSEC(&amp;quot;TGT&amp;quot;, 2015)
# Try the function on Mondelez
MDLZ &amp;lt;- getSEC(&amp;quot;MDLZ&amp;quot;, 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does not always work. Some statements are incomplete and the file fail. Then we have to go back and figure it out.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
