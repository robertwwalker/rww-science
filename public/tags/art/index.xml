<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>art | rww.science</title>
    <link>/tags/art/</link>
      <atom:link href="/tags/art/index.xml" rel="self" type="application/rss+xml" />
    <description>art</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2018</copyright><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/portrait.jpg</url>
      <title>art</title>
      <link>/tags/art/</link>
    </image>
    
    <item>
      <title>Generative aRt</title>
      <link>/2019/10/10/generative-art/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/2019/10/10/generative-art/</guid>
      <description>


&lt;div id=&#34;mathart&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;mathart&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;A cool package for math generated art that I just discovered. Here is the install code for it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;mapproj&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;ggforce&amp;quot;, &amp;quot;Rcpp&amp;quot;))
devtools::install_github(&amp;quot;marcusvolz/mathart&amp;quot;)
devtools::install_github(&amp;quot;marcusvolz/ggart&amp;quot;)
devtools::install_github(&amp;quot;gsimchoni/kandinsky&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;load-some-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load some libraries&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mathart)
library(ggart)
library(ggforce)
library(Rcpp)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generate-some-art&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generate some Art?&lt;/h2&gt;
&lt;p&gt;This is quite fun to do.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(12341)

terminals &amp;lt;- data.frame(x = runif(10, 0, 10000), y = runif(10, 0, 10000))

df &amp;lt;- 1:10000 %&amp;gt;%
  map_df(~weiszfeld(terminals, c(points$x[.], points$y[.])), .id = &amp;quot;id&amp;quot;)

p &amp;lt;- ggplot() +
  geom_point(aes(x, y), points, size = 1, alpha = 0.25, color = &amp;quot;skyblue&amp;quot;) +
  geom_point(aes(x, y), terminals, size = 5, alpha = 1, color=&amp;quot;purple&amp;quot;) +
  geom_line(aes(x, y, group = id), df, colour = &amp;quot;blue&amp;quot;, size = 0.5, alpha = 0.03) +
  coord_equal() +
  xlim(0, 10000) +
  ylim(0, 10000) +
  theme_blankcanvas(margin_cm = 0)

ggsave(&amp;quot;weiszfeld.png&amp;quot;, p, width = 20, height = 20, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://rww.science/img/art/weiszfeld.png&#34; alt=&#34;Weiszfeld&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Weiszfeld&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- lorenz_attractor(a=18, b=8/3, c=26, n=1000000)

p &amp;lt;- ggplot() +
  geom_path(aes(x, z), df, alpha = 0.15, size = 0.03, color=&amp;quot;purple&amp;quot;) +
  coord_equal() +
  xlim(-25, 25) + ylim(2.5, 52.5) +
  theme_blankcanvas(margin_cm = 0)

ggsave(&amp;quot;LAttr.png&amp;quot;, p, width = 20, height = 20, units = &amp;quot;cm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://rww.science/img/art/LAttr.png&#34; alt=&#34;Lorenz&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Lorenz&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- lorenz_attractor(a=3, b = 3, x0 = -1, y0 = 1, n=1000000)
p &amp;lt;- ggplot() +
  geom_path(aes(x, z), df, alpha = 0.5, size = 0.1, color=&amp;quot;pink&amp;quot;) +
  coord_equal() +
  xlim(-25, 25) + ylim(-40, 45) +
  theme_blankcanvas(margin_cm = 0)
ggsave(&amp;quot;LAttr2.png&amp;quot;, p, width = 20, height = 20, units = &amp;quot;cm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://rww.science/img/art/LAttr2.png&#34; alt=&#34;Lorenz2&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Lorenz2&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bob-ross-as-a-kandinsky&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bob Ross as a Kandinsky&lt;/h2&gt;
&lt;p&gt;One interesting thing that I found is the ability to build a Kandinsky out of data. There was a tidyTuesday on Bob Ross paintings/episodes; nothing could be better than to Kandinsky Bob Ross.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(kandinsky)
bob_ross &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-06/bob-ross.csv&amp;quot;)
kandinsky(bob_ross)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-generative-art/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That’s kinda lame. Let’s try visits to US National Parks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;park_visits &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv&amp;quot;)
kandinsky(park_visits)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-generative-art/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
