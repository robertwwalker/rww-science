<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web scraping | rww.science</title>
    <link>/categories/web-scraping/</link>
      <atom:link href="/categories/web-scraping/index.xml" rel="self" type="application/rss+xml" />
    <description>web scraping</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2018</copyright><lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/portrait.jpg</url>
      <title>web scraping</title>
      <link>/categories/web-scraping/</link>
    </image>
    
    <item>
      <title>COVID-19 County Maps for Oregon</title>
      <link>/2020/03/22/covid-19-county-maps-for-oregon/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/2020/03/22/covid-19-county-maps-for-oregon/</guid>
      <description>


&lt;div id=&#34;oregon-covid-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Oregon COVID data&lt;/h2&gt;
&lt;p&gt;I now have a few days of data. The scraping script appears at the bottom of the post; I am only using the county level data. These data are current as of March 22, 2020.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;load(url(&amp;quot;https://github.com/robertwwalker/rww-science/raw/master/content/post/2020-03-22-covid-19-county-maps-for-oregon/OregonCOVID2020-03-22.RData&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;a-base-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A base map&lt;/h2&gt;
&lt;p&gt;I am going to use the &lt;code&gt;urbnmapr&lt;/code&gt; package to grab the county map for Oregon. A few steps. Load the library then grab the map as an &lt;code&gt;sf&lt;/code&gt; object; there is a &lt;code&gt;geom_sf&lt;/code&gt; that makes them easy to work with. Next I filter Oregon’s counties. Finally, I join the map to the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(urbnmapr)
Counties.SF &amp;lt;- get_urbn_map(&amp;quot;counties&amp;quot;, sf=TRUE)
Oregon.SF &amp;lt;- Counties.SF %&amp;gt;% filter(state_name==&amp;quot;Oregon&amp;quot;)
Oregon.SF &amp;lt;- Oregon.SF %&amp;gt;% mutate(County = str_remove(county_name, &amp;quot; County&amp;quot;))
Map.Me &amp;lt;- left_join(Oregon.SF,Oregon.COVID, by=&amp;quot;County&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-whole-thing-an-animation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Whole Thing: An Animation&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel); library(ggthemes); library(gganimate)
Anim1 &amp;lt;- Map.Me %&amp;gt;% 
  ggplot(., aes(geometry=geometry, fill=Number.of.cases, label=County)) + 
  geom_sf() +
  coord_sf(crs=3785, datum=NA) + 
  geom_label_repel(stat = &amp;quot;sf_coordinates&amp;quot;,
    min.segment.length = 0,
    colour = &amp;quot;white&amp;quot;,
    segment.colour = &amp;quot;white&amp;quot;,
    size = 3,
    box.padding = unit(0.05, &amp;quot;lines&amp;quot;))  + scale_fill_continuous_tableau(&amp;quot;Red&amp;quot;) + theme_minimal() + labs(title=&amp;quot;COVID-19 in Oregon&amp;quot;, subtitle=&amp;quot;{frame_time}&amp;quot;, x=&amp;quot;&amp;quot;, y=&amp;quot;&amp;quot;, caption=&amp;quot;Made with R, ggplot2, and ggrepel by @PieRatio \n data: https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;) + transition_time(date)
animate(Anim1, end_pause=100, nframes=200)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-3-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;div id=&#34;a-mapping-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Mapping Function&lt;/h2&gt;
&lt;p&gt;To save time later, I turned the plots into a function so that I can use to reproduce each frame. Two inputs to the function, the dataset that is always the merged data from above and the date that I want to plot located in &lt;code&gt;date1&lt;/code&gt; in a &lt;code&gt;YYYY-MM-DD&lt;/code&gt; format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID &amp;lt;- function(date1, data) {
data %&amp;gt;% filter(date==date1) %&amp;gt;%
  ggplot(., aes(geometry=geometry, fill=Number.of.cases, label=County)) + 
  geom_sf() +
  coord_sf(crs=3785, datum=NA) + 
  geom_label_repel(stat = &amp;quot;sf_coordinates&amp;quot;,
    min.segment.length = 0,
    colour = &amp;quot;white&amp;quot;,
    segment.colour = &amp;quot;white&amp;quot;,
    size = 3,
    box.padding = unit(0.05, &amp;quot;lines&amp;quot;))  + scale_fill_continuous_tableau(&amp;quot;Red&amp;quot;) + theme_minimal() + labs(title=&amp;quot;COVID-19 in Oregon&amp;quot;, subtitle=date1, x=&amp;quot;&amp;quot;, y=&amp;quot;&amp;quot;, caption=&amp;quot;Made with R, ggplot2, and ggrepel by @PieRatio \n data: https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-result-for-03182020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Result for 03/18/2020&lt;/h2&gt;
&lt;p&gt;This is the first date for which I can find data. The &lt;code&gt;waybackmachine&lt;/code&gt; was crucial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID(&amp;quot;2020-03-18&amp;quot;, Map.Me)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-result-for-03192020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Result for 03/19/2020&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID(&amp;quot;2020-03-19&amp;quot;, Map.Me)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-result-for-03202020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Result for 03/20/2020&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID(&amp;quot;2020-03-20&amp;quot;, Map.Me)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-result-for-03212020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Result for 03/21/2020&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID(&amp;quot;2020-03-21&amp;quot;, Map.Me)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-result-for-03222020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Result for 03/22/2020&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Plot.COVID(&amp;quot;2020-03-22&amp;quot;, Map.Me)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-22-covid-19-county-maps-for-oregon/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-new-section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The New Section&lt;/h2&gt;
&lt;div id=&#34;a-scraper&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A Scraper&lt;/h3&gt;
&lt;p&gt;I have written some code here to grab the updates as they post them and add them to the dataset. Now I need to set an cron job to evaluate this script daily.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
load(paste0(&amp;quot;OregonCOVID&amp;quot;,Sys.Date()-1,&amp;quot;.RData&amp;quot;))
webpage &amp;lt;- read_html(&amp;quot;https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;)
tbls &amp;lt;- html_nodes(webpage, &amp;quot;table&amp;quot;)
tbls
COVID.New &amp;lt;- webpage %&amp;gt;%
        html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;%
        .[2] %&amp;gt;%
        html_table(fill = TRUE) %&amp;gt;% data.frame()
# Oregon.Total &amp;lt;- COVID.New %&amp;gt;% mutate(date=as.Date(Sys.Date())) %&amp;gt;% filter(County==&amp;quot;Total&amp;quot;) %&amp;gt;% bind_rows(.,Oregon.Total) 
Oregon.COVID &amp;lt;- COVID.New %&amp;gt;% mutate(date=as.Date(Sys.Date())) %&amp;gt;% filter(County!=&amp;quot;Total&amp;quot;) %&amp;gt;% bind_rows(.,Oregon.COVID) 
# save(Oregon.COVID, file=paste0(&amp;quot;OregonCOVID&amp;quot;,Sys.Date(),&amp;quot;.RData&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-historical-data-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding Historical Data Together&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A function to parse the tables
OHA.Corona &amp;lt;- function(website, date) {
webpage &amp;lt;- read_html(website)
COVID.Head &amp;lt;- webpage %&amp;gt;%
        html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;%
        .[1] %&amp;gt;%
        html_table(fill = TRUE) %&amp;gt;% data.frame()
names(COVID.Head) &amp;lt;- c(&amp;quot;Category&amp;quot;,&amp;quot;Outcome&amp;quot;)
COVID.Head &amp;lt;- COVID.Head %&amp;gt;% mutate(date=as.Date(date))
COVID.County &amp;lt;- webpage %&amp;gt;%
        html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;%
        .[2] %&amp;gt;%
        html_table(fill = TRUE) %&amp;gt;% data.frame() %&amp;gt;% mutate(date=as.Date(date))
COVID.Age &amp;lt;- webpage %&amp;gt;%
        html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;%
        .[3] %&amp;gt;%
        html_table(fill = TRUE) %&amp;gt;% data.frame() %&amp;gt;% mutate(date=as.Date(date))
return(list(Header=COVID.Head, Counties = COVID.County, Ages = COVID.Age))
}
# March 18 Update
Mar18 &amp;lt;- OHA.Corona(website=&amp;quot;https://web.archive.org/web/20200319144434/https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;, date=&amp;quot;2020-03-18&amp;quot;)
# March 19 Update
Mar19 &amp;lt;- OHA.Corona(website=&amp;quot;https://web.archive.org/web/20200320152224/https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;, date=&amp;quot;2020-03-19&amp;quot;)
# March 20 Update
Mar20 &amp;lt;- OHA.Corona(website=&amp;quot;https://web.archive.org/web/20200320202955/https://govstatus.egov.com/OR-OHA-COVID-19&amp;quot;, date=&amp;quot;2020-03-20&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;put-it-all-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Put it all together&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load March 21, 22 that I already had
load(&amp;quot;OregonCOVID2020-03-22.RData&amp;quot;)
# Drop the labels
OR.Fixing &amp;lt;- Oregon.COVID %&amp;gt;% select(-PTT) %&amp;gt;% head() %&amp;gt;% mutate(m=str_split_fixed(date, &amp;quot;/&amp;quot;, 3)[,1], d=str_split_fixed(date, &amp;quot;/&amp;quot;, 3)[,2], yr=str_split_fixed(date, &amp;quot;/&amp;quot;, 3)[,3])
# Create the dates and drop the intermediate garbage
OR.COVID &amp;lt;- OR.Fixing %&amp;gt;% mutate(date = as.Date(paste(yr,m,d,sep=&amp;quot;-&amp;quot;))) %&amp;gt;% select(-c(m,d,yr))
# Bind it all together
Oregon.COVID &amp;lt;- bind_rows(Oregon.COVID,Mar18$Counties,Mar19$Counties,Mar20$Counties)
# Drop the rows of Totals
Oregon.COVID &amp;lt;- Oregon.COVID %&amp;gt;% filter(County!=&amp;quot;Total&amp;quot;)
# Save it for later use.
save(Oregon.COVID, file=&amp;quot;OregonCOVID2020-03-22.RData&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>a quick tidyTuesday on Passwords</title>
      <link>/2020/01/18/a-quick-tidytuesday-on-passwords/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/2020/01/18/a-quick-tidytuesday-on-passwords/</guid>
      <description>


&lt;p&gt;First, I wanted to acquire the distribution of letters and then play with that. I embedded the result here. The second step is to import the tidyTuesday data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
Letter.Freq &amp;lt;- data.frame(stringsAsFactors=FALSE,
                     Letter = c(&amp;quot;E&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;O&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;N&amp;quot;, &amp;quot;S&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;H&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;U&amp;quot;,
                                &amp;quot;C&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;W&amp;quot;, &amp;quot;G&amp;quot;, &amp;quot;P&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;V&amp;quot;,
                                &amp;quot;K&amp;quot;, &amp;quot;X&amp;quot;, &amp;quot;Q&amp;quot;, &amp;quot;J&amp;quot;, &amp;quot;Z&amp;quot;),
                  Frequency = c(12.02, 9.1, 8.12, 7.68, 7.31, 6.95, 6.28, 6.02, 5.92, 4.32,
                                3.98, 2.88, 2.71, 2.61, 2.3, 2.11, 2.09, 2.03,
                                1.82, 1.49, 1.11, 0.69, 0.17, 0.11, 0.1, 0.07)
               )
Letter.Freq &amp;lt;- Letter.Freq %&amp;gt;% mutate(Frequency = Frequency / 100, Letter = tolower(Letter))
passwords &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-14/passwords.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me visualize the distribution of letters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggthemes)
ggplot(Letter.Freq) + aes(x=reorder(Letter, desc(Letter)), y=Frequency) + geom_col() + coord_flip() + theme_economist() + labs(x=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-18-a-quick-tidytuesday-on-passwords/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I want to use the &lt;code&gt;tm&lt;/code&gt; library for topic models to extract out the numbers and only work with letters. There is something probably worthwhile to do with Zipf’s law or the like on that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: NLP&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;NLP&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:ggplot2&amp;#39;:
## 
##     annotate&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Remove numbers
passwords &amp;lt;- passwords %&amp;gt;% mutate(PasswordNN = removeNumbers(password))
# Split each string into the letters; here I am repurposing a word count function
freq &amp;lt;- function(x,y) {
     word &amp;lt;- tolower(unlist(strsplit(x,&amp;quot;&amp;quot;)))
     word_table &amp;lt;- table(word)
     ans &amp;lt;- word_table[names(word_table)==y]
     return(ans)
}
# Use sapply to apply the function.  This is not tidy but I have never sat down with map
Letter.FreqPW &amp;lt;- sapply(letters,function(x) { freq(passwords$PasswordNN, x) } )
# Rename the resulting vector with proper labels
names(Letter.FreqPW) &amp;lt;- letters
# Clean up the names and metrics
LFPW &amp;lt;- data.frame(Letter.FreqPW)
LFPW$Letter &amp;lt;- row.names(LFPW)
LFPW &amp;lt;- LFPW %&amp;gt;% mutate(Freq = Letter.FreqPW)
# Join a result
Res &amp;lt;- left_join(Letter.Freq, LFPW)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;Letter&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Res&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Letter Frequency Letter.FreqPW Freq
## 1       e    0.1202           327  327
## 2       t    0.0910           144  144
## 3       a    0.0812           271  271
## 4       o    0.0768           191  191
## 5       i    0.0731           178  178
## 6       n    0.0695           197  197
## 7       s    0.0628           176  176
## 8       r    0.0602           233  233
## 9       h    0.0592            82   82
## 10      d    0.0432            96   96
## 11      l    0.0398           144  144
## 12      u    0.0288            59   59
## 13      c    0.0271           115  115
## 14      m    0.0261            86   86
## 15      f    0.0230            38   38
## 16      y    0.0211            64   64
## 17      w    0.0209            42   42
## 18      g    0.0203            75   75
## 19      p    0.0182            71   71
## 20      b    0.0149            77   77
## 21      v    0.0111            37   37
## 22      k    0.0069            50   50
## 23      x    0.0017            36   36
## 24      q    0.0011             5    5
## 25      j    0.0010            26   26
## 26      z    0.0007            12   12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turn it to a proportion.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a proportion
Res &amp;lt;- Res %&amp;gt;% mutate(LF = Freq / sum(Freq))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me plot the result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel)
gg1 &amp;lt;- ggplot(Res) + aes(x=Frequency, y=LF, label=Letter) + geom_label_repel(fill=&amp;quot;white&amp;quot;) + labs(x=&amp;quot;Language Frequency&amp;quot;, y=&amp;quot;Frequency in Password&amp;quot;, title=&amp;quot;Password Letters vs. English Letter Frequency&amp;quot;) + coord_equal() + geom_abline(slope=1, intercept=0) + ggthemes::theme_economist() 
gg1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-18-a-quick-tidytuesday-on-passwords/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping EPL Salary Data</title>
      <link>/2018/04/08/scraping-epl-salary-data/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      <guid>/2018/04/08/scraping-epl-salary-data/</guid>
      <description>


&lt;div id=&#34;epl-scraping&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;EPL Scraping&lt;/h1&gt;
&lt;p&gt;In a previous &lt;a href=&#34;https://www.data.viajes/post/scraping-the-nfl-salary-cap-data-with-python-and-r/&#34;&gt;post&lt;/a&gt;, I scraped some NFL data and learned the structure of Sportrac. Now, I want to scrape the available data on the EPL. The EPL data is organized in a few distinct but potentially linked tables. The basic structure is organized around team folders. Let me begin by isolating those URLs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(tidyverse)
base_url &amp;lt;- &amp;quot;http://www.spotrac.com/epl/&amp;quot;
read.base &amp;lt;- read_html(base_url)
team.URL &amp;lt;- read.base %&amp;gt;% html_nodes(&amp;quot;.team-name&amp;quot;) %&amp;gt;% html_attr(&amp;#39;href&amp;#39;)
team.URL&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;https://www.spotrac.com/epl/afc-bournemouth/&amp;quot;            
##  [2] &amp;quot;https://www.spotrac.com/epl/arsenal-f.c/&amp;quot;                
##  [3] &amp;quot;https://www.spotrac.com/epl/aston-villa-f.c/&amp;quot;            
##  [4] &amp;quot;https://www.spotrac.com/epl/brighton-hove-albion/&amp;quot;       
##  [5] &amp;quot;https://www.spotrac.com/epl/burnley-f.c/&amp;quot;                
##  [6] &amp;quot;https://www.spotrac.com/epl/chelsea-f.c/&amp;quot;                
##  [7] &amp;quot;https://www.spotrac.com/epl/crystal-palace/&amp;quot;             
##  [8] &amp;quot;https://www.spotrac.com/epl/everton-f.c/&amp;quot;                
##  [9] &amp;quot;https://www.spotrac.com/epl/leicester-city/&amp;quot;             
## [10] &amp;quot;https://www.spotrac.com/epl/liverpool-f.c/&amp;quot;              
## [11] &amp;quot;https://www.spotrac.com/epl/manchester-city-f.c/&amp;quot;        
## [12] &amp;quot;https://www.spotrac.com/epl/manchester-united-f.c/&amp;quot;      
## [13] &amp;quot;https://www.spotrac.com/epl/newcastle-united-f.c/&amp;quot;       
## [14] &amp;quot;https://www.spotrac.com/epl/norwich-city-f.c/&amp;quot;           
## [15] &amp;quot;https://www.spotrac.com/epl/sheffield-united-f.c/&amp;quot;       
## [16] &amp;quot;https://www.spotrac.com/epl/southampton-f.c/&amp;quot;            
## [17] &amp;quot;https://www.spotrac.com/epl/tottenham-hotspur-f.c/&amp;quot;      
## [18] &amp;quot;https://www.spotrac.com/epl/watford/&amp;quot;                    
## [19] &amp;quot;https://www.spotrac.com/epl/west-ham-united-f.c/&amp;quot;        
## [20] &amp;quot;https://www.spotrac.com/epl/wolverhampton-wanderers-f.c/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clean up the URLs to get the team names by themselves.
team.names &amp;lt;- gsub(base_url, &amp;quot;&amp;quot;, team.URL)
team.names &amp;lt;- gsub(&amp;quot;-f.c&amp;quot;, &amp;quot; FC&amp;quot;, team.names)
team.names &amp;lt;- gsub(&amp;quot;afc&amp;quot;, &amp;quot;AFC&amp;quot;, team.names)
team.names &amp;lt;- gsub(&amp;quot;a.f.c&amp;quot;, &amp;quot;AFC&amp;quot;, team.names)
# Dashes and slashes need to  removed.
team.names &amp;lt;- gsub(&amp;quot;-&amp;quot;, &amp;quot; &amp;quot;, team.names)
team.names &amp;lt;- gsub(&amp;quot;/&amp;quot;, &amp;quot;&amp;quot;, team.names)
# Fix FC and AFC for Bournemouth
simpleCap &amp;lt;- function(x) {
  s &amp;lt;- strsplit(x, &amp;quot; &amp;quot;)[[1]]
  paste(toupper(substring(s, 1,1)), substring(s, 2), sep=&amp;quot;&amp;quot;, collapse=&amp;quot; &amp;quot;)
  }
# Capitalise and trim white space
team.names &amp;lt;- sapply(team.names, simpleCap)
#team.names &amp;lt;- sapply(team.names, trimws)
names(team.names) &amp;lt;- NULL
# Now I have a vector of 20 names.
short.names &amp;lt;- gsub(&amp;quot; FC&amp;quot;,&amp;quot;&amp;quot;, team.names)
short.names &amp;lt;- gsub(&amp;quot; AFC&amp;quot;,&amp;quot;&amp;quot;, short.names)
EPL.names &amp;lt;- data.frame(team.names,short.names,team.URL)
EPL.names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                            team.names
## 1             Https:www.spotrac.comeplAFC Bournemouth
## 2                  Https:www.spotrac.comeplarsenal FC
## 3              Https:www.spotrac.comeplaston Villa FC
## 4        Https:www.spotrac.comeplbrighton Hove Albion
## 5                  Https:www.spotrac.comeplburnley FC
## 6                  Https:www.spotrac.comeplchelsea FC
## 7              Https:www.spotrac.comeplcrystal Palace
## 8                  Https:www.spotrac.comepleverton FC
## 9              Https:www.spotrac.comeplleicester City
## 10               Https:www.spotrac.comeplliverpool FC
## 11         Https:www.spotrac.comeplmanchester City FC
## 12       Https:www.spotrac.comeplmanchester United FC
## 13        Https:www.spotrac.comeplnewcastle United FC
## 14            Https:www.spotrac.comeplnorwich City FC
## 15        Https:www.spotrac.comeplsheffield United FC
## 16             Https:www.spotrac.comeplsouthampton FC
## 17       Https:www.spotrac.comepltottenham Hotspur FC
## 18                    Https:www.spotrac.comeplwatford
## 19         Https:www.spotrac.comeplwest Ham United FC
## 20 Https:www.spotrac.comeplwolverhampton Wanderers FC
##                                        short.names
## 1          Https:www.spotrac.comeplAFC Bournemouth
## 2                  Https:www.spotrac.comeplarsenal
## 3              Https:www.spotrac.comeplaston Villa
## 4     Https:www.spotrac.comeplbrighton Hove Albion
## 5                  Https:www.spotrac.comeplburnley
## 6                  Https:www.spotrac.comeplchelsea
## 7           Https:www.spotrac.comeplcrystal Palace
## 8                  Https:www.spotrac.comepleverton
## 9           Https:www.spotrac.comeplleicester City
## 10               Https:www.spotrac.comeplliverpool
## 11         Https:www.spotrac.comeplmanchester City
## 12       Https:www.spotrac.comeplmanchester United
## 13        Https:www.spotrac.comeplnewcastle United
## 14            Https:www.spotrac.comeplnorwich City
## 15        Https:www.spotrac.comeplsheffield United
## 16             Https:www.spotrac.comeplsouthampton
## 17       Https:www.spotrac.comepltottenham Hotspur
## 18                 Https:www.spotrac.comeplwatford
## 19         Https:www.spotrac.comeplwest Ham United
## 20 Https:www.spotrac.comeplwolverhampton Wanderers
##                                                    team.URL
## 1              https://www.spotrac.com/epl/afc-bournemouth/
## 2                  https://www.spotrac.com/epl/arsenal-f.c/
## 3              https://www.spotrac.com/epl/aston-villa-f.c/
## 4         https://www.spotrac.com/epl/brighton-hove-albion/
## 5                  https://www.spotrac.com/epl/burnley-f.c/
## 6                  https://www.spotrac.com/epl/chelsea-f.c/
## 7               https://www.spotrac.com/epl/crystal-palace/
## 8                  https://www.spotrac.com/epl/everton-f.c/
## 9               https://www.spotrac.com/epl/leicester-city/
## 10               https://www.spotrac.com/epl/liverpool-f.c/
## 11         https://www.spotrac.com/epl/manchester-city-f.c/
## 12       https://www.spotrac.com/epl/manchester-united-f.c/
## 13        https://www.spotrac.com/epl/newcastle-united-f.c/
## 14            https://www.spotrac.com/epl/norwich-city-f.c/
## 15        https://www.spotrac.com/epl/sheffield-united-f.c/
## 16             https://www.spotrac.com/epl/southampton-f.c/
## 17       https://www.spotrac.com/epl/tottenham-hotspur-f.c/
## 18                     https://www.spotrac.com/epl/watford/
## 19         https://www.spotrac.com/epl/west-ham-united-f.c/
## 20 https://www.spotrac.com/epl/wolverhampton-wanderers-f.c/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With clean names, I can take each of the scraping tasks in order.&lt;/p&gt;
&lt;div id=&#34;payroll-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Payroll Data&lt;/h2&gt;
&lt;p&gt;The teams have payroll information that is broken down into active players, reserves, and loanees. The workflow is first to create the relevant URLs to scrape the payroll data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;team_links &amp;lt;- paste0(team.URL,&amp;quot;payroll/&amp;quot;,sep=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With URLs, I am going to set forth on the task. First, the &lt;em&gt;SelectorGadget&lt;/em&gt; and a glimpse of the documents suggests an easy solution. I want to isolate the table nodes and keep the tables. First, a function for the URLs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.creator &amp;lt;- function(link) {
read_html(link) %&amp;gt;% html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;% html_table(header=TRUE, fill=TRUE)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I want to apply data scraping function to the URLs. Then, I want to name the list items, assess the size of the active roster, and then clean up the relevant data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;EPL.salary &amp;lt;- sapply(team_links, function(x) {data.creator(x)})
names(EPL.salary) &amp;lt;- EPL.names$short.names
team.len &amp;lt;- sapply(seq(1,20), function(x) { dim(EPL.salary[[x]][[1]])[[1]]})
Team &amp;lt;- rep(EPL.names$short.names, team.len)
Players &amp;lt;- sapply(seq(1,20), function(x) { str_split(EPL.salary[[x]][[1]][,1], &amp;quot;\t&amp;quot;, simplify=TRUE)[,31]})
Position &amp;lt;- sapply(seq(1,20), function(x) { EPL.salary[[x]][[1]][,2]})
Base.Salary &amp;lt;- sapply(seq(1,20), function(x) { Res &amp;lt;- gsub(&amp;quot;£&amp;quot;, &amp;quot;&amp;quot;, EPL.salary[[x]][[1]][,3]); gsub(&amp;quot;,&amp;quot;,&amp;quot;&amp;quot;,Res)})
EPL.Result &amp;lt;- data.frame(Players=unlist(Players), Team=Team, Position=unlist(Position), Base.Salary=unlist(Base.Salary))
EPL.Result$Base.Salary &amp;lt;- str_replace(EPL.Result$Base.Salary, &amp;quot;-&amp;quot;, NA_character_)
EPL.Result$Base.Num &amp;lt;- as.numeric(EPL.Result$Base.Salary)
EPL.Result %&amp;gt;% group_by(Position) %&amp;gt;% summarise(Mean.Base.Salary=mean(Base.Num, na.rm=TRUE),sdBS=sd(Base.Num, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##   Position Mean.Base.Salary  sdBS
##   &amp;lt;fct&amp;gt;               &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 D                    25.8  3.77
## 2 F                    24.6  3.80
## 3 GK                   28.9  4.63
## 4 M                    24.8  5.21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;EPL.Result %&amp;gt;% group_by(Position,Team) %&amp;gt;% summarise(Mean.Base.Salary=mean(Base.Num, na.rm=TRUE),sdBS=sd(Base.Num, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 80 x 4
## # Groups:   Position [4]
##    Position Team                                         Mean.Base.Salary  sdBS
##    &amp;lt;fct&amp;gt;    &amp;lt;fct&amp;gt;                                                   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 D        Https:www.spotrac.comeplAFC Bournemouth                  25.1  4.30
##  2 D        Https:www.spotrac.comeplarsenal                          24.9  3.59
##  3 D        Https:www.spotrac.comeplaston Villa                      24.9  3.09
##  4 D        Https:www.spotrac.comeplbrighton Hove Albion             26.5  3.96
##  5 D        Https:www.spotrac.comeplburnley                          28.2  2.60
##  6 D        Https:www.spotrac.comeplchelsea                          25.3  2.66
##  7 D        Https:www.spotrac.comeplcrystal Palace                   27.8  3.19
##  8 D        Https:www.spotrac.comepleverton                          27    3.82
##  9 D        Https:www.spotrac.comeplleicester City                   26    5.81
## 10 D        Https:www.spotrac.comeplliverpool                        25    3.42
## # … with 70 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, a little picture to describe spending on the active roster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fplot &amp;lt;- ggplot(EPL.Result, aes(Base.Num,Team))
gpl &amp;lt;- fplot + geom_jitter(height=0.25, width=0) + facet_wrap(~Position) + labs(x=&amp;quot;Base Salary&amp;quot;)
gpl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-08-scraping-epl-salary-data/index_files/figure-html/Picture-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;contracts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Contracts&lt;/h2&gt;
&lt;p&gt;The contracts are stored in a different URL structure that is accessible via &lt;em&gt;contracts&lt;/em&gt; in the html tree by tean. Firstm I want to paste the names together with links to explore.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;team_links &amp;lt;- paste0(team.URL,&amp;quot;contracts/&amp;quot;,sep=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I have all the links that I need and can turn to processing the data. This is something of a mess. Let me first grab some data to showcase the problem. In what follows, first I will grab the HTML files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Base.Contracts &amp;lt;- lapply(team_links, read_html)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Processing them is a bit more difficult. What does the basic table look like?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Base.Contracts[[1]] %&amp;gt;% html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;% html_table(header=TRUE, fill=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##                  Player (31) Pos. Age
## 1         DefoeJermain Defoe    F  37
## 2       BegovicAsmir Begovic   GK  32
## 3       LermaJefferson Lerma    M  25
## 4        WilsonCallum Wilson    F  27
## 5            KingJoshua King    F  28
## 6              AkeNathan Ake    D  24
## 7             CookSteve Cook    D  28
## 8        SurmanAndrew Surman    M  33
## 9           ArterHarry Arter    M  30
## 10             IbeJordon Ibe    F  24
## 11            CookLewis Cook    M  23
## 12        GoslingDan Gosling    M  30
## 13           SmithAdam Smith    D  28
## 14         FraserRyan Fraser    F  25
## 15    DanielsCharlie Daniels    D  33
## 16 StanislasJunior Stanislas    F  30
## 17           SmithBrad Smith    D  25
## 18        BrooksDavid Brooks    M  22
## 19            RicoDiego Rico    D  26
## 20    SolankeDominic Solanke    F  22
## 21     BillingPhilip Billing    M  23
## 22      FrancisSimon Francis    D  34
## 23        MephamChris Mepham    D  22
## 24          BorucArtur Boruc   GK  39
## 25    RamsdaleAaron Ramsdale   GK  21
## 26       SimpsonJack Simpson    D  23
## 27      SurridgeSam Surridge    F  22
## 28          KellyLloyd Kelly    D  21
## 29         StaceyJack Stacey    D  23
## 30       TraversMark Travers   GK  20
## 31     DanjumaArnaut Danjuma    F  23
##                                                             Contract Terms
## 1  16140000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£16,140,000
## 2  14560000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£14,560,000
## 3  13000000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£13,000,000
## 4  12480000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£12,480,000
## 5  11700000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£11,700,000
## 6  10400000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£10,400,000
## 7    9360000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£9,360,000
## 8    9100000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£9,100,000
## 9    8320000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£8,320,000
## 10   7904000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,904,000
## 11   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 12   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 13   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 14   5616000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,616,000
## 15   5460000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,460,000
## 16   5460000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,460,000
## 17   5200000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,200,000
## 18   4160000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£4,160,000
## 19   4004000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£4,004,000
## 20   3900000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,900,000
## 21   3900000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,900,000
## 22   3120000\n\t\t\t\t\t\t\t\t\t\t\t2 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,120,000
## 23   3035000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,035,000
## 24   2080000\n\t\t\t\t\t\t\t\t\t\t\t1 yr\n\t\t\t\t\t\t\t\t\t\t\t£2,080,000
## 25      780000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£780,000
## 26      468000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£468,000
## 27                  0\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t-
## 28                  0\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t-
## 29                     0\n\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t\t-
## 30                     0\n\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t\t-
## 31                  0\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t-
##    Avg. Salary Transfer Fee Expires
## 1   £5,380,000            -    2020
## 2   £3,640,000   £9,780,000    2021
## 3   £2,600,000  £25,125,000    2023
## 4   £3,120,000   £3,000,000    2023
## 5   £2,340,000            -    2021
## 6   £2,080,000  £19,380,000    2022
## 7   £2,340,000     £150,000    2021
## 8   £1,820,000     £536,000    2020
## 9   £2,080,000            -    2021
## 10  £1,976,000  £15,000,000    2020
## 11  £1,820,000   £5,950,000    2022
## 12  £1,820,000            -    2021
## 13  £1,820,000            -    2021
## 14  £1,404,000     £400,000    2020
## 15  £1,820,000     £191,000    2020
## 16  £1,820,000            -    2021
## 17  £1,300,000   £3,060,000    2020
## 18  £1,040,000  £10,125,000    2022
## 19  £1,001,000  £10,750,000    2022
## 20  £1,300,000  £24,170,000    2022
## 21    £780,000  £18,810,000    2024
## 22  £1,560,000            -    2020
## 23    £607,000  £15,500,000    2023
## 24  £2,080,000  £10,000,000    2020
## 25    £156,000     £799,000    2021
## 26    £156,000            -    2020
## 27           -            -    2021
## 28           -  £16,870,000       -
## 29           -   £5,070,000       -
## 30           -            -       -
## 31           -  £20,520,000    2024
## 
## [[2]]
##    Player (31) Pos. Age                Contract Terms Avg. Salary Transfer Fee
## 1 Harry Wilson    M  21 1 yr\n\t\t\t\t\t\t\t\t\t\t\t-           -            -
##   Expires
## 1       -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The names and the contract year and terms are going to require parsing. I have chosen the first html that corresponds to Bournemouth; other teams are worse because loan players are in a second table. That impacts the wage bill, perhaps, depending on the arrangement in the loan, but the contract details from the player do not have that team as signatory. This has to be fixed. That is easy enough to fix, there are two embedded tables and I can select the first one. When it comes to the names, there is no easy separation for the first column; I will grab them from nodes in the html.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.creator &amp;lt;- function(data) { 
  data %&amp;gt;% html_nodes(&amp;quot;table&amp;quot;) %&amp;gt;% html_table(header=TRUE, fill=TRUE) -&amp;gt; ret.tab
  nrowsm &amp;lt;- dim(ret.tab[[1]])[[1]]
  split.me &amp;lt;- ret.tab[[1]][,4]
  tempdf &amp;lt;- data.frame(matrix(data=gsub(&amp;quot;\t|-&amp;quot;,&amp;quot;&amp;quot;,unlist(strsplit(split.me, &amp;quot;\\n&amp;quot;))), nrow=nrowsm, byrow=TRUE))
  names(tempdf) &amp;lt;- c(&amp;quot;value&amp;quot;,&amp;quot;years&amp;quot;,&amp;quot;value.pds&amp;quot;)
  data %&amp;gt;% html_nodes(&amp;quot;.player&amp;quot;) %&amp;gt;% html_nodes(&amp;quot;a&amp;quot;) %&amp;gt;% html_text() -&amp;gt; Player.Names
  Player.Names &amp;lt;- Player.Names[c(1:nrowsm)]
  data %&amp;gt;% html_nodes(&amp;quot;.player&amp;quot;) %&amp;gt;% html_nodes(&amp;quot;a&amp;quot;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;) -&amp;gt; Player.Links
  Player.links &amp;lt;- Player.Links[c(1:nrowsm)]
  data %&amp;gt;% html_nodes(&amp;quot;.player&amp;quot;) %&amp;gt;% html_nodes(&amp;quot;span&amp;quot;) %&amp;gt;% html_text() -&amp;gt; Last.Name
  Last.Name &amp;lt;- Last.Name[c(1:nrowsm)]
  names(ret.tab[1][[1]])[c(1:2)] &amp;lt;- c(&amp;quot;Player&amp;quot;,&amp;quot;Position&amp;quot;)
#  data.frame(ret.tab[,c(5,6,7)]) 
  return(data.frame(ret.tab[1][[1]],tempdf,Player.Names,Player.links,Last.Name))
}
EPL.Contracts &amp;lt;- lapply(Base.Contracts, data.creator)
names(EPL.Contracts) &amp;lt;- EPL.names$short.names
EPL.Contracts[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                       Player Position Age
## 1         DefoeJermain Defoe        F  37
## 2       BegovicAsmir Begovic       GK  32
## 3       LermaJefferson Lerma        M  25
## 4        WilsonCallum Wilson        F  27
## 5            KingJoshua King        F  28
## 6              AkeNathan Ake        D  24
## 7             CookSteve Cook        D  28
## 8        SurmanAndrew Surman        M  33
## 9           ArterHarry Arter        M  30
## 10             IbeJordon Ibe        F  24
## 11            CookLewis Cook        M  23
## 12        GoslingDan Gosling        M  30
## 13           SmithAdam Smith        D  28
## 14         FraserRyan Fraser        F  25
## 15    DanielsCharlie Daniels        D  33
## 16 StanislasJunior Stanislas        F  30
## 17           SmithBrad Smith        D  25
## 18        BrooksDavid Brooks        M  22
## 19            RicoDiego Rico        D  26
## 20    SolankeDominic Solanke        F  22
## 21     BillingPhilip Billing        M  23
## 22      FrancisSimon Francis        D  34
## 23        MephamChris Mepham        D  22
## 24          BorucArtur Boruc       GK  39
## 25    RamsdaleAaron Ramsdale       GK  21
## 26       SimpsonJack Simpson        D  23
## 27      SurridgeSam Surridge        F  22
## 28          KellyLloyd Kelly        D  21
## 29         StaceyJack Stacey        D  23
## 30       TraversMark Travers       GK  20
## 31     DanjumaArnaut Danjuma        F  23
##                                                             Contract.Terms
## 1  16140000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£16,140,000
## 2  14560000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£14,560,000
## 3  13000000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£13,000,000
## 4  12480000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£12,480,000
## 5  11700000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£11,700,000
## 6  10400000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£10,400,000
## 7    9360000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£9,360,000
## 8    9100000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£9,100,000
## 9    8320000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£8,320,000
## 10   7904000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,904,000
## 11   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 12   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 13   7280000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£7,280,000
## 14   5616000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,616,000
## 15   5460000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,460,000
## 16   5460000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,460,000
## 17   5200000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£5,200,000
## 18   4160000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£4,160,000
## 19   4004000\n\t\t\t\t\t\t\t\t\t\t\t4 yr\n\t\t\t\t\t\t\t\t\t\t\t£4,004,000
## 20   3900000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,900,000
## 21   3900000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,900,000
## 22   3120000\n\t\t\t\t\t\t\t\t\t\t\t2 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,120,000
## 23   3035000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£3,035,000
## 24   2080000\n\t\t\t\t\t\t\t\t\t\t\t1 yr\n\t\t\t\t\t\t\t\t\t\t\t£2,080,000
## 25      780000\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t£780,000
## 26      468000\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t£468,000
## 27                  0\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t-
## 28                  0\n\t\t\t\t\t\t\t\t\t\t\t3 yr\n\t\t\t\t\t\t\t\t\t\t\t-
## 29                     0\n\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t\t-
## 30                     0\n\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t\t-
## 31                  0\n\t\t\t\t\t\t\t\t\t\t\t5 yr\n\t\t\t\t\t\t\t\t\t\t\t-
##    Avg..Salary Transfer.Fee Expires    value years   value.pds     Player.Names
## 1   £5,380,000            -    2020 16140000  3 yr £16,140,000    Jermain Defoe
## 2   £3,640,000   £9,780,000    2021 14560000  4 yr £14,560,000    Asmir Begovic
## 3   £2,600,000  £25,125,000    2023 13000000  5 yr £13,000,000  Jefferson Lerma
## 4   £3,120,000   £3,000,000    2023 12480000  4 yr £12,480,000    Callum Wilson
## 5   £2,340,000            -    2021 11700000  5 yr £11,700,000      Joshua King
## 6   £2,080,000  £19,380,000    2022 10400000  5 yr £10,400,000       Nathan Ake
## 7   £2,340,000     £150,000    2021  9360000  4 yr  £9,360,000       Steve Cook
## 8   £1,820,000     £536,000    2020  9100000  5 yr  £9,100,000    Andrew Surman
## 9   £2,080,000            -    2021  8320000  4 yr  £8,320,000      Harry Arter
## 10  £1,976,000  £15,000,000    2020  7904000  4 yr  £7,904,000       Jordon Ibe
## 11  £1,820,000   £5,950,000    2022  7280000  4 yr  £7,280,000       Lewis Cook
## 12  £1,820,000            -    2021  7280000  4 yr  £7,280,000      Dan Gosling
## 13  £1,820,000            -    2021  7280000  4 yr  £7,280,000       Adam Smith
## 14  £1,404,000     £400,000    2020  5616000  4 yr  £5,616,000      Ryan Fraser
## 15  £1,820,000     £191,000    2020  5460000  3 yr  £5,460,000  Charlie Daniels
## 16  £1,820,000            -    2021  5460000  3 yr  £5,460,000 Junior Stanislas
## 17  £1,300,000   £3,060,000    2020  5200000  4 yr  £5,200,000       Brad Smith
## 18  £1,040,000  £10,125,000    2022  4160000  4 yr  £4,160,000     David Brooks
## 19  £1,001,000  £10,750,000    2022  4004000  4 yr  £4,004,000       Diego Rico
## 20  £1,300,000  £24,170,000    2022  3900000  3 yr  £3,900,000  Dominic Solanke
## 21    £780,000  £18,810,000    2024  3900000  5 yr  £3,900,000   Philip Billing
## 22  £1,560,000            -    2020  3120000  2 yr  £3,120,000    Simon Francis
## 23    £607,000  £15,500,000    2023  3035000  5 yr  £3,035,000     Chris Mepham
## 24  £2,080,000  £10,000,000    2020  2080000  1 yr  £2,080,000      Artur Boruc
## 25    £156,000     £799,000    2021   780000  5 yr    £780,000   Aaron Ramsdale
## 26    £156,000            -    2020   468000  3 yr    £468,000     Jack Simpson
## 27           -            -    2021        0  3 yr                 Sam Surridge
## 28           -  £16,870,000       -        0  3 yr                  Lloyd Kelly
## 29           -   £5,070,000       -        0                        Jack Stacey
## 30           -            -       -        0                       Mark Travers
## 31           -  £20,520,000    2024        0  5 yr               Arnaut Danjuma
##                                      Player.links Last.Name
## 1  https://www.spotrac.com/redirect/player/23836/     Defoe
## 2  https://www.spotrac.com/redirect/player/22625/   Begovic
## 3  https://www.spotrac.com/redirect/player/27878/     Lerma
## 4  https://www.spotrac.com/redirect/player/22694/    Wilson
## 5  https://www.spotrac.com/redirect/player/22685/      King
## 6  https://www.spotrac.com/redirect/player/15521/       Ake
## 7  https://www.spotrac.com/redirect/player/22677/      Cook
## 8  https://www.spotrac.com/redirect/player/22692/    Surman
## 9  https://www.spotrac.com/redirect/player/22674/     Arter
## 10 https://www.spotrac.com/redirect/player/22684/       Ibe
## 11 https://www.spotrac.com/redirect/player/22676/      Cook
## 12 https://www.spotrac.com/redirect/player/22682/   Gosling
## 13 https://www.spotrac.com/redirect/player/22689/     Smith
## 14 https://www.spotrac.com/redirect/player/22680/    Fraser
## 15 https://www.spotrac.com/redirect/player/22678/   Daniels
## 16 https://www.spotrac.com/redirect/player/22691/ Stanislas
## 17 https://www.spotrac.com/redirect/player/22690/     Smith
## 18 https://www.spotrac.com/redirect/player/27877/    Brooks
## 19 https://www.spotrac.com/redirect/player/27879/      Rico
## 20 https://www.spotrac.com/redirect/player/22637/   Solanke
## 21 https://www.spotrac.com/redirect/player/23192/   Billing
## 22 https://www.spotrac.com/redirect/player/22679/   Francis
## 23 https://www.spotrac.com/redirect/player/28460/    Mepham
## 24 https://www.spotrac.com/redirect/player/22660/     Boruc
## 25 https://www.spotrac.com/redirect/player/22661/  Ramsdale
## 26 https://www.spotrac.com/redirect/player/24102/   Simpson
## 27 https://www.spotrac.com/redirect/player/22693/  Surridge
## 28 https://www.spotrac.com/redirect/player/30108/     Kelly
## 29 https://www.spotrac.com/redirect/player/32060/    Stacey
## 30 https://www.spotrac.com/redirect/player/32306/   Travers
## 31 https://www.spotrac.com/redirect/player/32702/   Danjuma&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data now have some junk alongside workable versions of the variables of interest. It is worth noting that the header of the contracts data allows us to verify the size of the table as we picked it up [though I do rename them to allow the rbind to work]. This also suggests a strategy for picking up the rownames that is different than the above method that uses the dimension of the html table. Perhaps I should just gsub the header to recover the integer number of players. To tidy the data, they need to be stacked. A simple do.call and row bind will probably work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Team.Base &amp;lt;- sapply(EPL.Contracts, dim)[1,]
Team &amp;lt;- rep(as.character(names(Team.Base)),Team.Base)
EPL.Contracts.df &amp;lt;- do.call(&amp;quot;rbind&amp;quot;,EPL.Contracts)
rownames(EPL.Contracts.df) &amp;lt;- NULL
EPL.Contracts.df$Team &amp;lt;- Team
EPL.Contracts.df$value &amp;lt;- as.numeric(as.character(EPL.Contracts.df$value))
EPL.Contracts.df %&amp;gt;% group_by(Team) %&amp;gt;% summarise(Team.Mean=mean(value, na.rm=TRUE)/1e3, Team.SD=sd(value, na.rm=TRUE)) -&amp;gt; Team.mean
pp &amp;lt;- Team.mean %&amp;gt;% arrange(Team.Mean)
pp$Team &amp;lt;- factor(pp$Team, levels = pp$Team)
pp %&amp;gt;% ggplot(aes(Team.Mean,Team, size=Team.SD)) + geom_point() + labs(x=&amp;quot;Avg. Contract (1000s)&amp;quot;) -&amp;gt; cplot
cplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-08-scraping-epl-salary-data/index_files/figure-html/EPLT-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;EPL.Contracts.df %&amp;gt;% group_by(Team) %&amp;gt;% summarise(Age.Mean=mean(Age, na.rm=TRUE), Age.SD=sd(Age, na.rm=TRUE)) -&amp;gt; Team.mean
Team.mean %&amp;gt;% ungroup() %&amp;gt;% arrange(., Age.Mean) -&amp;gt; pp
pp$Team &amp;lt;- factor(pp$Team, levels = pp$Team)
pp %&amp;gt;% ggplot(aes(Age.Mean,Team,size=Age.SD)) + geom_point() + labs(x=&amp;quot;Age&amp;quot;) -&amp;gt; cplot
cplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-08-scraping-epl-salary-data/index_files/figure-html/EPLT2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
